#lang planet neil/sicp
(define (filtered-accumulate combiner null-value filter term a next b)
  (cond ((> a b) null-value) 
        ((filter a) (combiner (term a) (filtered-accumulate combiner null-value filter term (next a) next b)))
        (else (combiner null-value (filtered-accumulate combiner null-value filter term (next a) next b)))
        ))
        
(define (y x) x)
(define (square x) (* x x))
(define (inc x) (+ x 1))
(define (prime? n)
  ;;费马定理
  (define (expmod base exp m)
    (cond ((= exp 0) 1)
          ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
          (else (remainder (* base (expmod base (- exp 1) m)) m))          
  )) 
  (define (fermat-test n)
    (define (try-it a)
      (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1))))
    )
  (define (fast-prime? n times)
    (cond ((= times 0) true)
           ((fermat-test n) (fast-prime? n (- times 1)))
           (else false)
           ))
  (fast-prime? n 100)
    ) 
(define (gcd a b)
  (if (= b 0) a
      (gcd b (remainder a b))
      ))
(define (b-filter n)
  (= (gcd n 10) 1))
(filtered-accumulate + 0 prime? y 2 inc 10)
(filtered-accumulate * 1 b-filter y 2 inc 10)
#lang planet neil/sicp
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next)
      ))
  )
  (try first-guess)
  )
(define (square x) (* x x))
;牛顿法
(define dx 0.000001)
;求导数
(define (deriv g)
  (lambda (x) 
    (/ (- (g (+ x dx)) (g x)) dx))
    )
(define (cube x) (* x x x))
;((deriv cube) 5)
(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))
    ))
(define (newton-method g guess)
  (fixed-point (newton-transform g) guess))
(define (sqrt x)
  (newton-method (lambda (y)(- (square y) x)) 1.0))
;(sqrt 100)
;;练习1.40
(define (cubic a b c)
  (lambda (x)(+ (* x x x) (* a x x) (* b x) c)))
(newton-method (cubic 2 5 5) 1)
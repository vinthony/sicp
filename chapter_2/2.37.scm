#lang planet neil/sicp
;;http://sicp.readthedocs.org/en/latest/chp2/36.html
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence))
          )
      ))
(define (car-n s)
  (if (pair? s) (map car s) (map car (list s))))
(define (cdr-n s)
  (if (pair? s) (map cdr s) s))
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (car-n seqs)) (accumulate-n op init (cdr-n seqs)))))
(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (x) (dot-product v x)) m))
(define (transpose mat)
  (accumulate-n cons '() mat))
(define m (list (list 1 2 3 4)
                (list 4 5 6 6)
                (list 6 7 8 9)))
(define v (list (list 1 2 3)
                (list 3 4 5)
                (list 6 7 8)
                (list 6 7 8)
                ))
(define v-vector (list 1 2 3 4))
(display (matrix-*-vector m v-vector))
(newline)
(display (transpose v))
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (x) (matrix-*-vector cols x)) m)))
(display (matrix-*-matrix m v))
 #lang planet neil/sicp
(define (last-pair l)
  (if (pair? l)
      (if (null? (cdr l)) l
          (last-pair (cdr l)))
      ))
(define (make-queue)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (insert x)
      (let ((new-pair (cons x '())))
      (if (empty?)
          (begin (set! front-ptr new-pair) (set! rear-ptr new-pair) (cons front-ptr rear-ptr))
          (begin (set-cdr! rear-ptr new-pair) (set! rear-ptr new-pair) (cons front-ptr rear-ptr))
          )))
    (define (delete)
      (if (empty?)
          (error "ERROR IN DELETE" (cons front-ptr rear-ptr))
          (begin (set! front-ptr (cdr front-ptr)) (cons front-ptr rear-ptr))
      ))
    (define (dispatch m)
      (cond ((eq? m 'empty?) empty?)
            ((eq? m 'insert) insert)
            ((eq? m 'delete) delete)
            (else (error "ERROR in QUEUE" m))
            ))

    dispatch))

(define q1 (make-queue))
((q1 'insert) 'a)
(newline)
((q1 'insert) 'b)
((q1 'insert) 'c)
(newline)
((q1 'delete)) 
(newline)
((q1 'delete))